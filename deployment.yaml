### serviceaccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: configsecret
automountServiceAccountToken: true  

---
### clusterrole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: config-secret-role
rules:
- apiGroups: [""]
  resources: ["configmap", "secrets"]
  resourceNames: ["k8-config","k8-secret"]
  verbs: ["update", "get", "watch", "list"]

---
### clusterrolebinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: config-secret-binder
subjects:
  - kind: ServiceAccount
    name: configsecret
    namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin #config-secret-role
  apiGroup: ""

---
### configmap
### kubectl create configmap k8-config --from-literal=hello="Hello literal" --from-file=./my-configs/
kind: ConfigMap
apiVersion: v1
metadata:
  name: k8-config
  namespace: default
data:
  application-dev.properties: "config.key=app-dev-key\r\nsecret1key=app-dev-secret"
  application-prod.properties: "config.key=app-prod-key\r\nsecret1key=app-prod-secret\r\n"
  application.properties: "spring.application.name=k8-secret\r\nsecret1key=app-def-secret\r\ndefault.config.key=app-def-key\r\nconfig.key=app-def-key\r\n\r\n#spring.config.location=file:./../my-configs/\r\n#spring.config.location=file:/env/config/\r\n#spring.config.additional-location=file:./my-configs/\r\n#spring.config.additional-location=file:/env/config/\r\n#spring.config.name=application,outbound\r\nspring.cloud.kubernetes.enabled=true\r\nspring.cloud.kubernetes.config.enabled=true\r\nspring.cloud.kubernetes.secrets.enabled=true\r\nspring.cloud.kubernetes.secrets.enableApi=true\r\n#spring.cloud.kubernetes.config.namespace=default\r\n#spring.cloud.kubernetes.config.name=k8-config\r\n#spring.cloud.kubernetes.config.paths=/env/config\r\n#spring.cloud.kubernetes.config.sources[0].name=k8-config\r\nspring.cloud.kubernetes.secrets.namespace=default\r\nspring.cloud.kubernetes.secrets.name=k8-secret\r\n#spring.cloud.kubernetes.secrets.paths=/k8-secret\r\n#spring.cloud.kubernetes.reload.enabled=true\r\n#spring.cloud.kubernetes.reload.mode=polling\r\n#spring.cloud.kubernetes.reload.period=2000\r\n#management.endpoint.restart.enabled=true\r\n#management.endpoint.health.enabled=true\r\n#management.endpoint.info.enabled=true"
  hello: Hello literal
  outbound-dev.yaml: "greeting: \r\n  message: yaml-out-Greetings Dev\r\n  farewell:
    yaml-out-Farewell Dev"
  outbound-prod.yaml: "greeting: \r\n  message: yaml-out-Greetings Ops\r\n  farewell:
    yaml-out-Farewell Ops"
  outbound.yaml: "hello: yaml-out-Hello All\r\ngreeting:\r\n  message: yaml-out-Greetings
    All\r\n  farewell: yaml-out-Farewell All\r\ndefault:\r\n  config:\r\n    key:
    yaml-out-key"

---
### kubectl create secret generic k8-secret --from-file=./my-secrets/

kind: Secret
apiVersion: v1
metadata:
  name: k8-secret
  namespace: default
data:
  secret2.def: ZnJvbSBkZWY=
  secret2.dev: ZnJvbSBkZXY=
  secret2.key: ZGVmLXNlY3JldA==
  secret2.prod: ZnJvbSBwcm9k
---
### deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8-dep
  namespace: default
  labels:
    app: k8-dep
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8-dep
  template:
    metadata:
      labels:
        app: k8-dep
    spec:
      serviceAccountName: configsecret
      automountServiceAccountToken: true
      containers:
        - name: k8-dep
          image: aaronbcj/k8-img:1.0
          ports:
          - containerPort: 8080
          args: ["--spring.profiles.active=dev"]
          imagePullPolicy: Always
          env:
            - name: SECRETS_CRED_USER_NAME
              value: creduser
            - name: SECRETS_CRED_USER_ACCESS_TOKEN
              value: credtoken
          volumeMounts:
            - name: config-mount
              mountPath: /etc/config
            - name: k8-secret
              mountPath: etc/secret/k8-secret
              readOnly: true
      volumes:
        - name: config-mount
          configMap:
            name: k8-config
        - name: k8-secret
          secret:
            secretName: k8-secret

---
### kubectl expose deployment k8-dep --type=NodePort --name=k8-svc
### kubectl get service k8-svc -o yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: k8-dep
  name: k8-svc
  namespace: default
spec:
  clusterIP: 10.104.22.244
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 32662
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: k8-dep
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}